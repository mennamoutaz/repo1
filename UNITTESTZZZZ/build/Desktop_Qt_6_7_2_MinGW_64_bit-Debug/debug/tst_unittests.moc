/****************************************************************************
** Meta object code from reading C++ file 'tst_unittests.cpp'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.7.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qmetatype.h>

#include <QtCore/qtmochelpers.h>

#include <memory>


#include <QtCore/qxptype_traits.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_unittests.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.7.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
QT_WARNING_DISABLE_GCC("-Wuseless-cast")
namespace {

#ifdef QT_MOC_HAS_STRINGDATA
struct qt_meta_stringdata_CLASSTestsENDCLASS_t {};
constexpr auto qt_meta_stringdata_CLASSTestsENDCLASS = QtMocHelpers::stringData(
    "Tests",
    "testAIMoveEmptyBoard",
    "",
    "testAIMovePartialBoard",
    "testBuildTree",
    "testMinimax",
    "testEvaluateAIWinsHorizontally",
    "testEvaluateAIWinsVertically",
    "testEvaluateAIWinsDiagonally",
    "testEvaluatePlayerWinsHorizontally",
    "testEvaluatePlayerWinsVertically",
    "testEvaluatePlayerWinsDiagonally",
    "testEvaluateDraw",
    "testPlayer1WinsRow",
    "testPlayer2WinsColumn",
    "testPlayer1WinsDiagonal",
    "testPlayer2WinsDiagonal",
    "testPlayer2WinsAntiDiagonal",
    "testPlayer2WinsRow",
    "testPlayer1WinsColumn",
    "testPlayer1WinsAntiDiagonal",
    "testGameDraw",
    "testGameNotOver",
    "testInitialEmptyBoard",
    "testSetGetValue",
    "testOutOfBoundsAccess",
    "createBoard",
    "GameBoard",
    "std::initializer_list<std::initializer_list<int>>",
    "values"
);
#else  // !QT_MOC_HAS_STRINGDATA
#error "qtmochelpers.h not found or too old."
#endif // !QT_MOC_HAS_STRINGDATA
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_CLASSTestsENDCLASS[] = {

 // content:
      12,       // revision
       0,       // classname
       0,    0, // classinfo
      25,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,  164,    2, 0x08,    1 /* Private */,
       3,    0,  165,    2, 0x08,    2 /* Private */,
       4,    0,  166,    2, 0x08,    3 /* Private */,
       5,    0,  167,    2, 0x08,    4 /* Private */,
       6,    0,  168,    2, 0x08,    5 /* Private */,
       7,    0,  169,    2, 0x08,    6 /* Private */,
       8,    0,  170,    2, 0x08,    7 /* Private */,
       9,    0,  171,    2, 0x08,    8 /* Private */,
      10,    0,  172,    2, 0x08,    9 /* Private */,
      11,    0,  173,    2, 0x08,   10 /* Private */,
      12,    0,  174,    2, 0x08,   11 /* Private */,
      13,    0,  175,    2, 0x08,   12 /* Private */,
      14,    0,  176,    2, 0x08,   13 /* Private */,
      15,    0,  177,    2, 0x08,   14 /* Private */,
      16,    0,  178,    2, 0x08,   15 /* Private */,
      17,    0,  179,    2, 0x08,   16 /* Private */,
      18,    0,  180,    2, 0x08,   17 /* Private */,
      19,    0,  181,    2, 0x08,   18 /* Private */,
      20,    0,  182,    2, 0x08,   19 /* Private */,
      21,    0,  183,    2, 0x08,   20 /* Private */,
      22,    0,  184,    2, 0x08,   21 /* Private */,
      23,    0,  185,    2, 0x08,   22 /* Private */,
      24,    0,  186,    2, 0x08,   23 /* Private */,
      25,    0,  187,    2, 0x08,   24 /* Private */,
      26,    1,  188,    2, 0x08,   25 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    0x80000000 | 27, 0x80000000 | 28,   29,

       0        // eod
};

Q_CONSTINIT const QMetaObject Tests::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_CLASSTestsENDCLASS.offsetsAndSizes,
    qt_meta_data_CLASSTestsENDCLASS,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_CLASSTestsENDCLASS_t,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<Tests, std::true_type>,
        // method 'testAIMoveEmptyBoard'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testAIMovePartialBoard'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testBuildTree'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testMinimax'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testEvaluateAIWinsHorizontally'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testEvaluateAIWinsVertically'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testEvaluateAIWinsDiagonally'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testEvaluatePlayerWinsHorizontally'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testEvaluatePlayerWinsVertically'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testEvaluatePlayerWinsDiagonally'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testEvaluateDraw'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testPlayer1WinsRow'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testPlayer2WinsColumn'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testPlayer1WinsDiagonal'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testPlayer2WinsDiagonal'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testPlayer2WinsAntiDiagonal'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testPlayer2WinsRow'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testPlayer1WinsColumn'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testPlayer1WinsAntiDiagonal'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testGameDraw'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testGameNotOver'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testInitialEmptyBoard'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testSetGetValue'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testOutOfBoundsAccess'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'createBoard'
        QtPrivate::TypeAndForceComplete<GameBoard, std::false_type>,
        QtPrivate::TypeAndForceComplete<std::initializer_list<std::initializer_list<int>>, std::false_type>
    >,
    nullptr
} };

void Tests::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<Tests *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->testAIMoveEmptyBoard(); break;
        case 1: _t->testAIMovePartialBoard(); break;
        case 2: _t->testBuildTree(); break;
        case 3: _t->testMinimax(); break;
        case 4: _t->testEvaluateAIWinsHorizontally(); break;
        case 5: _t->testEvaluateAIWinsVertically(); break;
        case 6: _t->testEvaluateAIWinsDiagonally(); break;
        case 7: _t->testEvaluatePlayerWinsHorizontally(); break;
        case 8: _t->testEvaluatePlayerWinsVertically(); break;
        case 9: _t->testEvaluatePlayerWinsDiagonally(); break;
        case 10: _t->testEvaluateDraw(); break;
        case 11: _t->testPlayer1WinsRow(); break;
        case 12: _t->testPlayer2WinsColumn(); break;
        case 13: _t->testPlayer1WinsDiagonal(); break;
        case 14: _t->testPlayer2WinsDiagonal(); break;
        case 15: _t->testPlayer2WinsAntiDiagonal(); break;
        case 16: _t->testPlayer2WinsRow(); break;
        case 17: _t->testPlayer1WinsColumn(); break;
        case 18: _t->testPlayer1WinsAntiDiagonal(); break;
        case 19: _t->testGameDraw(); break;
        case 20: _t->testGameNotOver(); break;
        case 21: _t->testInitialEmptyBoard(); break;
        case 22: _t->testSetGetValue(); break;
        case 23: _t->testOutOfBoundsAccess(); break;
        case 24: { GameBoard _r = _t->createBoard((*reinterpret_cast< std::add_pointer_t<std::initializer_list<std::initializer_list<int>>>>(_a[1])));
            if (_a[0]) *reinterpret_cast< GameBoard*>(_a[0]) = std::move(_r); }  break;
        default: ;
        }
    }
}

const QMetaObject *Tests::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *Tests::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_CLASSTestsENDCLASS.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int Tests::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 25)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 25;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 25)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 25;
    }
    return _id;
}
QT_WARNING_POP
